# Generated by Django 5.1.3 on 2024-11-06 13:08

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunSQL(
            """
                DROP TABLE Course;
                CREATE TABLE Categories (
        	        CategoryID SERIAL PRIMARY KEY,
        	        CategoryText VARCHAR(100)
                );

                CREATE TABLE Instructor (
                    InstructorID BIGSERIAL PRIMARY KEY NOT NULL,
                    InstructorName VARCHAR(100) NOT NULL,
                    Email VARCHAR(127) UNIQUE NOT NULL CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
                    Username VARCHAR(255) UNIQUE NOT NULL,
                    Password VARCHAR(255) NOT NULL,
                    ProfilePic TEXT,
                    BIO TEXT,
                    Rating INT DEFAULT 0 CHECK (Rating >= 0 AND Rating <= 5),
                    CreatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    SocialMediaAccount TEXT
                );

                CREATE TABLE Student (
                    StudentID BIGSERIAL PRIMARY KEY NOT NULL,
                    StudentName VARCHAR(100) NOT NULL,
                    Email VARCHAR(127) UNIQUE NOT NULL CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
                    Username VARCHAR(255) UNIQUE NOT NULL,
                    Password VARCHAR(255) NOT NULL,
                    ProfilePic TEXT,
                    CreatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TYPE CourseStatus AS ENUM ('public', 'private');

                CREATE TABLE Course (
                    CourseID SERIAL PRIMARY KEY NOT NULL,
                    Title VARCHAR(100) NOT NULL,
                    Description TEXT NOT NULL,
                    TopInstructorID INT REFERENCES Instructor(InstructorID)
                        ON DELETE CASCADE,
                    CategoryID INT REFERENCES Categories(CategoryID) 
                        ON DELETE CASCADE,
                    SeenStatus CourseStatus, --public or private
                    Duration INTERVAL NOT NULL DEFAULT INTERVAL '0',
                    CreatedAt TIMESTAMP Default CURRENT_TIMESTAMP,
                    Price Decimal(8,2) CHECK (Price >= 0) NOT NULL,
                    Rating INT DEFAULT 0 CHECK (Rating >= 0 AND Rating <= 5),
                    Requirements TEXT[],
                    CourseImage TEXT,
                    Certificate TEXT --link of the certificate image
                );

                CREATE TABLE Course_Instructor (
                    CourseID INT,
                    InstructorID INT,
                    PRIMARY KEY (CourseID, InstructorID),
                    FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE,
                    FOREIGN KEY (InstructorID) REFERENCES Instructor(InstructorID) ON DELETE CASCADE
                );

                CREATE TABLE Student_Course (
                    CourseID INT NOT NULL,
                    StudentID INT NOT NULL,
                    PurchaseDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    StudentProgress DECIMAL(3,1),
                    PRIMARY KEY (CourseID, StudentID),
                    FOREIGN KEY (CourseID) REFERENCES Course(CourseID)
                        ON DELETE CASCADE,
                    FOREIGN KEY (StudentID) REFERENCES Student(StudentID)
                        ON DELETE CASCADE
                );

                CREATE TABLE CourseSection (
                    CourseSectionID SERIAL PRIMARY KEY,
                    CourseID INT REFERENCES Course(CourseID) ON DELETE CASCADE,
                    Title VARCHAR(100) NOT NULL,
                    Duration INTERVAL
                );

                CREATE TABLE Video (
                    VideoID SERIAL PRIMARY KEY,
                    CourseSectionID INT REFERENCES CourseSection(CourseSectionID)
                        ON DELETE CASCADE NOT NULL,
                    VideoLink TEXT NOT NULL,
                    Title VARCHAR(100) NOT NULL
                );

                CREATE TABLE QA (
                    QAID SERIAL PRIMARY KEY,
                    VideoID INT REFERENCES Video(VideoID)
                        ON DELETE CASCADE NOT NULL
                );

                CREATE TABLE Messages (
                    MessageID SERIAL PRIMARY KEY NOT NULL,
                    MessageText TEXT NOT NULL,
                    isAnswer BOOLEAN NOT NULL, -- true -> answer, false -> question
                    AnswerTo INT REFERENCES Student(StudentID) ON DELETE SET NULL,
                    SenderStudentID INT DEFAULT NULL,
                    SenderInstructorID INT DEFAULT NULL,
                    QAID INT REFERENCES QA(QAID) ON DELETE CASCADE,
                    FOREIGN KEY (SenderStudentID) REFERENCES Student(StudentID) ON DELETE SET NULL,
                    FOREIGN KEY (SenderInstructorID) REFERENCES Instructor(InstructorID) ON DELETE SET NULL
                );

                CREATE TYPE ExamType AS ENUM ('quiz', 'contest');

                CREATE TABLE Exam (
                    ExamID BIGSERIAL PRIMARY KEY,
                    Title TEXT,
                    CourseID INT REFERENCES Course(CourseID) ON DELETE CASCADE NOT NULL,
                    SectionID INT REFERENCES CourseSection(CourseSectionID) ON DELETE CASCADE
                        DEFAULT NULL,
                    InstructorID INT REFERENCES Instructor(InstructorID) ON DELETE CASCADE,
                    ExamKind ExamType,
                    Duration INTERVAL,
                    TotalMarks DECIMAL(10, 2),
                    PassingMarks DECIMAL(10, 2),
                    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    EndDate TIMESTAMP
                );

                CREATE TABLE Questions (
                    QuestionID BIGSERIAL PRIMARY KEY,
                    ExamID INT REFERENCES Exam(ExamID),
                    QuestionText TEXT NOT NULL,
                    Choices TEXT[],
                    CorrectAnswerIndex INT
                );

                CREATE TYPE AssignmentStatus AS ENUM ('pending', 'submitted', 'graded', 'passed', 'failed');

                CREATE TABLE Assignment (
                    AssignmentID BIGSERIAL PRIMARY KEY,
                    Title VARCHAR(100) NOt NULL,
                    Description TEXT NOT NULL,
                    CourseID INT REFERENCES Course(CourseID),
                    MaxMarks INT,
                    FileAttched TEXT, -- link to file attached
                    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TABLE PrivateCourseAnnouncement (
                    AnnouncementID BIGSERIAL PRIMARY KEY,
                    Announcement TEXT
                );

                CREATE TABLE Student_Assignment (
                    StudentAssignmentID SERIAL PRIMARY KEY,
                    StudentID INT REFERENCES Student(StudentID) ON DELETE CASCADE,
                    AssignmentID INT REFERENCES Assignment(AssignmentID) ON DELETE CASCADE,
                    SubmissionLink TEXT, -- Link to submitted assignment file, if applicable
                    Grade DECIMAL(5,2), -- Grade achieved on the assignment
                    Status AssignmentStatus DEFAULT 'pending',
                    SubmissionDate TIMESTAMP,
                    PassFail BOOLEAN
                );

                CREATE TABLE Transactions (
                    TransactionID INT PRIMARY KEY,
                    StudentID INT REFERENCES Student(StudentID),
                    InstructorID INT REFERENCES Instructor(InstructorID),
                    Amount DECIMAL(10,2),
                    ExecutedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TABLE Statistics (
                    CourseID INT REFERENCES Course(CourseID),
                    InstructorID INT REFERENCES Instructor(InstructorID),
                    StudentCount INT,
                    CompletionRate DECIMAL(4,2),
                    AverageGrades DECIMAL(10,2)
                );

                CREATE TABLE InstructorWhiteBoard (
                    InstructorID INT REFERENCES Instructor(InstructorID),
                    CourseID INT REFERENCES Course(CourseID),
                    AssignmentID INT  DEFAULT NULL REFERENCES Assignment(AssignmentID) ,
                    ExamID INT  DEFAULT NULL REFERENCES Exam(ExamID),
                    PRIMARY KEY (InstructorID, CourseID, AssignmentID, ExamID)
                );

                CREATE TABLE Chat (
                    StudentID INT REFERENCES Student(StudentID),
                    CourseID INT REFERENCES Course(CourseID),
                    InstructorID INT REFERENCES Instructor(InstructorID),
                    PRIMARY KEY (StudentID, CourseID, InstructorID)
                )
            """
        )
    ]
